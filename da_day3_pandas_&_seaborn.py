# -*- coding: utf-8 -*-
"""DA_Day3_Pandas & Seaborn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GZkb8TN0OLhtzzw4VrgXOswRXGZTcZ7F

Pandas:
 - Used for data manipulation (Data cleaning,organizing data)
 - creates dataframes from excel,csv,txt,DBs
 - Dataframe (rows and columns retable by pythom)
 - visualize the data
"""

import pandas as pd

"""Series"""

names = ["Hemanth","Revanth","Abdul","Manohar","Sai"]
index = [40,42,42,43,45]
ser1 = pd.Series(names,index)

print(ser1)

"""Importing files
 - for csv and txt:read_csv('file path')
 - for excel : read_excel('file path')
"""

df = pd.read_csv("/content/diabetcsv.csv")

df.head(10)

df.tail()

dft = pd.read_csv("/content/grades.txt",sep = " ")

dft.head(10)

dfe = pd.read_excel("/content/diabetes.xlsx")

dfe.head()

print(dft.describe)

print(dft.shape)   #Get the number of rows and columns

print(dft.shape[0])   #Get the number of rows only
print(dft.shape[1])   #GEt the number of columns only

print(dft.columns)    #get columns names

"""Accesing Data:

 loc - accepts column names and index

 iloc - accepts only *index*
"""

print(dft[2:5])   #To Access rows

print(dft.loc[2:5,"Names"])    #Rows of specified column

print(dft.iloc[2:5])

print(dft.iloc[2:5,:3])    #iloc[row range,coloumn range]=>index

dfn = pd.read_csv("/content/grades_withnulls.csv")

dfn.head()

dfn.isnull().head(7)

dfn.isnull()

dfn.isnull().sum()   #to view how many nulls we have per column

dfn.isnull().sum().sum()   #to view totally how many nulls

dfc =dfn.dropna()    #dropping all the rows with nulls

dfc

dfc1 = dfn.fillna(5)
dfc1

"""Cleaning with Mean ;"""

m = dfn['SEM3'].mean()
print(m)

dfc2 = dfn.fillna(m)
print(dfc2)

dropped = dfc2.drop_duplicates()
print(dropped)

"""Coloumns"""

dfc2.rename(columns = {"Grade":"GPA"})   #df.rename(coloumns ={oid:new})

dfc2.head

dfc2.rename(columns = {"Grade":"GPA"})   #df.rename(coloumns ={oid:new})    #inplace = for standard replacement

dfc2.head()

dfc2["Avg_score"]=(dfc2['SEM1']+dfc2['SEM2']+dfc2['SEM3'])/3     #df['newcol']=values

dfc2.head()

"""Plotting with Pandas"""

dfc2[['SEM1','SEM2']].plot.line()

dfc2[['SEM1','SEM2']].plot.line(subplots=True)

dfc2.plot.line(subplots=True)

"""Seaborn"""

import seaborn as sns

pl = sns.lineplot(x="Names",y="SEM1",data=dfc2)

sns.relplot(
    data=dfc2,
    x='SEM2',y='SEM1',col='Names')

sns.relplot(
    data=dfc2,
    x='SEM2',y='SEM1',col='Placed')

"""Problem
load disbects
create plot with range in x axis and class as columns
"""

dfc3 = pd.read_csv("/content/diabetcsv.csv")

dfc3

dfc3["Index"]=(dfc3.index)
dfc3

sns.relplot(data=dfc3,x="Index",y="age",col="class")

"""In-Built Datasets in Seaborn
 - tips
 - dowjones
 - fmri
 - dots
 - helptxt

To load dataset  

-syntax:  load_dataset("dataset name")

hue - different colors for didff category

style - different markers for diff category

color palettes -
 - pastel
 - bright
 - dark
 - deep
 - muted
 - colorblind
"""

tips = sns.load_dataset("tips")

tips.head()

dowjones = sns.load_dataset("dowjones")
dowjones.head()

fmri = sns.load_dataset("fmri")
fmri.head()

dots = sns.load_dataset("dots")
dots.head()

helpthexp = sns.load_dataset("tips")
helpthexp.head()

sns.relplot(data=helpthexp,x="total_bill",y="tip",hue="day",kind="line")   #hue is creating difference based on a column via colour

sns.relplot(data=helpthexp,x="total_bill",y="tip",hue="smoker",style="day",palette="dark")

sns.relplot(data=dowjones,x="Date",y="Price",kind="line")

sns.relplot(data=fmri,x="timepoint",y="signal")

sns.catplot(data=tips,x="total_bill",y="day",hue="smoker")

sns.catplot(data=fmri,x="region",y="timepoint",kind="violin")

sns.catplot(data=tips,x="total_bill",y="time",kind="violin",hue="smoker")

"""Linear Fit:
lmplot()

 - plotting the dataset
 - fitting the line
 - precidition
 - find the perfect line
"""

sns.lmplot(x="size",y='tip',data=tips)

sns.lmplot(data=fmri,x="timepoint",y="signal")